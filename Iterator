- 컬렉션 프레임워크에서 저장된 요소를 읽어오는 방법을 표준화하기 위한 역할(인터페이스)
- Collection의 하위 컬렉션들이 소유 -> Iterator 타입의 객체를 반환하는 메소드를 이미 구현
- List, Set계열에 구현(Map은 없음)
- 주로 읽기 전용으로 사용한다.

  Iterator 의  주요멤버
public interface Iterator {
boolean hasNext();
Object next();
void remove();
}

각 부분의 기능은
boolean hasNext()      :	해당 이터레이션(iteration)이 다음 요소를 가지고 있으면 true를 반환하고, 더 이상 다음 요소를 가지고 있지 않으면 false를 반환함.
E next()               :	이터레이션(iteration)의 다음 요소를 반환함.
default void remove()	 : 해당 반복자로 반환되는 마지막 요소를 현재 컬렉션에서 제거함. (선택적 기능)

아래는 예시 및 활용법이다.

활용법:

만약

ArrayList<String> list = new ArrayList<String>();
list.add("사과");
list.add("바나나");
list.add("포도");
list.add("파인애플");
list.add("복숭아");
위와 같이 list 내에 값을 저장해놨을 때, 이 값들을 확인하려면 어떻게 해야할까>?

1. for 문
for( int i =0; i<list.length; i++){
    System.out.println(( list.get(i) ));
}



2. for-each문(향상된 for문)
for( String str : list ){
    System.out.println( str );
}


3. Iterator 반복자
Iterator<String> iter = list.iterator();
while(iter.hasNext()){ 
	System.out.println(iter.next());
}

단, 값이 있다면 True, 없다면 False 값들을 반환한다.

다른 예시를 하나만 더 본다면,

LinkedList<Integer> lnkList = new LinkedList<Integer>();
lnkList.add(4);
lnkList.add(2);
lnkList.add(3);
lnkList.add(1);

 
1. 4 2 3 1
ListIterator<Integer> iter = lnkList.listIterator();
while (iter.hasNext()) {
    System.out.print(iter.next() + " ");
}

2. 1 3 2 4
while (iter.hasPrevious()) {
    System.out.print(iter.previous() + " ");
}
